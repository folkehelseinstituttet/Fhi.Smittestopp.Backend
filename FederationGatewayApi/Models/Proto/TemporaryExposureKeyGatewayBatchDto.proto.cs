// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TemporaryExposureKeyGatewayBatchDto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
namespace FederationGatewayApi.Models.Proto
{

    /// <summary>Holder for reflection information generated from TemporaryExposureKeyGatewayBatchDto.proto</summary>
    public static partial class TemporaryExposureKeyGatewayBatchDtoReflection {

    #region Descriptor
    /// <summary>File descriptor for TemporaryExposureKeyGatewayBatchDto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TemporaryExposureKeyGatewayBatchDtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CilUZW1wb3JhcnlFeHBvc3VyZUtleUdhdGV3YXlCYXRjaER0by5wcm90byJU",
            "CiNUZW1wb3JhcnlFeHBvc3VyZUtleUdhdGV3YXlCYXRjaER0bxItCgRrZXlz",
            "GAEgAygLMh8uVGVtcG9yYXJ5RXhwb3N1cmVLZXlHYXRld2F5RHRvIqIDCh5U",
            "ZW1wb3JhcnlFeHBvc3VyZUtleUdhdGV3YXlEdG8SEAoIa2V5X2RhdGEYASAB",
            "KAwSJQodcm9sbGluZ19zdGFydF9pbnRlcnZhbF9udW1iZXIYAiABKA0SFgoO",
            "cm9sbGluZ19wZXJpb2QYAyABKA0SHwoXdHJhbnNtaXNzaW9uX3Jpc2tfbGV2",
            "ZWwYBCABKAUSGQoRdmlzaXRlZF9jb3VudHJpZXMYBSADKAkSDgoGb3JpZ2lu",
            "GAYgASgJEj8KC3JlcG9ydF90eXBlGAcgASgOMiouVGVtcG9yYXJ5RXhwb3N1",
            "cmVLZXlHYXRld2F5RHRvLlJlcG9ydFR5cGUSJAocZGF5c19zaW5jZV9vbnNl",
            "dF9vZl9zeW1wdG9tcxgIIAEoESJ8CgpSZXBvcnRUeXBlEgsKB1VOS05PV04Q",
            "ABISCg5DT05GSVJNRURfVEVTVBABEiAKHENPTkZJUk1FRF9DTElOSUNBTF9E",
            "SUFHTk9TSVMQAhIPCgtTRUxGX1JFUE9SVBADEg0KCVJFQ1VSU0lWRRAEEgsK",
            "B1JFVk9LRUQQBUIkqgIhRmVkZXJhdGlvbkdhdGV3YXlBcGkuTW9kZWxzLlBy",
            "b3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayBatchDto), global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayBatchDto.Parser, new[]{ "Keys" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto), global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto.Parser, new[]{ "KeyData", "RollingStartIntervalNumber", "RollingPeriod", "TransmissionRiskLevel", "VisitedCountries", "Origin", "ReportType", "DaysSinceOnsetOfSymptoms" }, null, new[]{ typeof(global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto.Types.ReportType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TemporaryExposureKeyGatewayBatchDto : pb::IMessage<TemporaryExposureKeyGatewayBatchDto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TemporaryExposureKeyGatewayBatchDto> _parser = new pb::MessageParser<TemporaryExposureKeyGatewayBatchDto>(() => new TemporaryExposureKeyGatewayBatchDto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TemporaryExposureKeyGatewayBatchDto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayBatchDtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemporaryExposureKeyGatewayBatchDto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemporaryExposureKeyGatewayBatchDto(TemporaryExposureKeyGatewayBatchDto other) : this() {
      keys_ = other.keys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemporaryExposureKeyGatewayBatchDto Clone() {
      return new TemporaryExposureKeyGatewayBatchDto(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto.Parser);
    private readonly pbc::RepeatedField<global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto> keys_ = new pbc::RepeatedField<global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TemporaryExposureKeyGatewayBatchDto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TemporaryExposureKeyGatewayBatchDto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      keys_.WriteTo(output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      keys_.WriteTo(ref output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TemporaryExposureKeyGatewayBatchDto other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            keys_.AddEntriesFrom(ref input, _repeated_keys_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///message SignatureInfo {
  ///// The first two fields have been deprecated
  ///reserved 1, 2;
  ///reserved "app_bundle_id", "android_package";
  ///// Key version for rollovers
  ///// Must be in character class [a-zA-Z0-9_]. For example, 'v1'
  ///optional string verification_key_version = 3;
  ///// Alias with which to identify public key to be used for verification
  ///// Must be in character class [a-zA-Z0-9_.]
  ///// For cross-compatibility with Apple, you can use your region's three-digit
  ///// mobile country code (MCC). If your region has more than one MCC, choose the
  ///// one that Apple has configured.
  ///optional string verification_key_id = 4;
  ///// ASN.1 OID for Algorithm Identifier. For example, `1.2.840.10045.4.3.2'
  ///optional string signature_algorithm = 5;
  ///}
  /// </summary>
  public sealed partial class TemporaryExposureKeyGatewayDto : pb::IMessage<TemporaryExposureKeyGatewayDto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TemporaryExposureKeyGatewayDto> _parser = new pb::MessageParser<TemporaryExposureKeyGatewayDto>(() => new TemporaryExposureKeyGatewayDto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TemporaryExposureKeyGatewayDto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayBatchDtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemporaryExposureKeyGatewayDto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemporaryExposureKeyGatewayDto(TemporaryExposureKeyGatewayDto other) : this() {
      keyData_ = other.keyData_;
      rollingStartIntervalNumber_ = other.rollingStartIntervalNumber_;
      rollingPeriod_ = other.rollingPeriod_;
      transmissionRiskLevel_ = other.transmissionRiskLevel_;
      visitedCountries_ = other.visitedCountries_.Clone();
      origin_ = other.origin_;
      reportType_ = other.reportType_;
      daysSinceOnsetOfSymptoms_ = other.daysSinceOnsetOfSymptoms_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemporaryExposureKeyGatewayDto Clone() {
      return new TemporaryExposureKeyGatewayDto(this);
    }

    /// <summary>Field number for the "key_data" field.</summary>
    public const int KeyDataFieldNumber = 1;
    private pb::ByteString keyData_ = pb::ByteString.Empty;
    /// <summary>
    /// Key of infected user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString KeyData {
      get { return keyData_; }
      set {
        keyData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rolling_start_interval_number" field.</summary>
    public const int RollingStartIntervalNumberFieldNumber = 2;
    private uint rollingStartIntervalNumber_;
    /// <summary>
    /// The interval number since epoch for which a key starts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RollingStartIntervalNumber {
      get { return rollingStartIntervalNumber_; }
      set {
        rollingStartIntervalNumber_ = value;
      }
    }

    /// <summary>Field number for the "rolling_period" field.</summary>
    public const int RollingPeriodFieldNumber = 3;
    private uint rollingPeriod_;
    /// <summary>
    /// Varying risk associated with a key depending on diagnosis method
    /// Increments of 10 minutes describing how long a key is valid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RollingPeriod {
      get { return rollingPeriod_; }
      set {
        rollingPeriod_ = value;
      }
    }

    /// <summary>Field number for the "transmission_risk_level" field.</summary>
    public const int TransmissionRiskLevelFieldNumber = 4;
    private int transmissionRiskLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransmissionRiskLevel {
      get { return transmissionRiskLevel_; }
      set {
        transmissionRiskLevel_ = value;
      }
    }

    /// <summary>Field number for the "visited_countries" field.</summary>
    public const int VisitedCountriesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_visitedCountries_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> visitedCountries_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> VisitedCountries {
      get { return visitedCountries_; }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 6;
    private string origin_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Origin {
      get { return origin_; }
      set {
        origin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "report_type" field.</summary>
    public const int ReportTypeFieldNumber = 7;
    private global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto.Types.ReportType reportType_ = global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto.Types.ReportType.Unknown;
    /// <summary>
    /// Type of diagnosis associated with a key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto.Types.ReportType ReportType {
      get { return reportType_; }
      set {
        reportType_ = value;
      }
    }

    /// <summary>Field number for the "days_since_onset_of_symptoms" field.</summary>
    public const int DaysSinceOnsetOfSymptomsFieldNumber = 8;
    private int daysSinceOnsetOfSymptoms_;
    /// <summary>
    /// Number of days elapsed between symptom onset and the TEK being used.
    /// E.g. 2 means TEK is 2 days after onset of symptoms.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DaysSinceOnsetOfSymptoms {
      get { return daysSinceOnsetOfSymptoms_; }
      set {
        daysSinceOnsetOfSymptoms_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TemporaryExposureKeyGatewayDto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TemporaryExposureKeyGatewayDto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyData != other.KeyData) return false;
      if (RollingStartIntervalNumber != other.RollingStartIntervalNumber) return false;
      if (RollingPeriod != other.RollingPeriod) return false;
      if (TransmissionRiskLevel != other.TransmissionRiskLevel) return false;
      if(!visitedCountries_.Equals(other.visitedCountries_)) return false;
      if (Origin != other.Origin) return false;
      if (ReportType != other.ReportType) return false;
      if (DaysSinceOnsetOfSymptoms != other.DaysSinceOnsetOfSymptoms) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyData.Length != 0) hash ^= KeyData.GetHashCode();
      if (RollingStartIntervalNumber != 0) hash ^= RollingStartIntervalNumber.GetHashCode();
      if (RollingPeriod != 0) hash ^= RollingPeriod.GetHashCode();
      if (TransmissionRiskLevel != 0) hash ^= TransmissionRiskLevel.GetHashCode();
      hash ^= visitedCountries_.GetHashCode();
      if (Origin.Length != 0) hash ^= Origin.GetHashCode();
      if (ReportType != global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto.Types.ReportType.Unknown) hash ^= ReportType.GetHashCode();
      if (DaysSinceOnsetOfSymptoms != 0) hash ^= DaysSinceOnsetOfSymptoms.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (KeyData.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(KeyData);
      }
      if (RollingStartIntervalNumber != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RollingStartIntervalNumber);
      }
      if (RollingPeriod != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RollingPeriod);
      }
      if (TransmissionRiskLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TransmissionRiskLevel);
      }
      visitedCountries_.WriteTo(output, _repeated_visitedCountries_codec);
      if (Origin.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Origin);
      }
      if (ReportType != global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto.Types.ReportType.Unknown) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ReportType);
      }
      if (DaysSinceOnsetOfSymptoms != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(DaysSinceOnsetOfSymptoms);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (KeyData.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(KeyData);
      }
      if (RollingStartIntervalNumber != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RollingStartIntervalNumber);
      }
      if (RollingPeriod != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RollingPeriod);
      }
      if (TransmissionRiskLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TransmissionRiskLevel);
      }
      visitedCountries_.WriteTo(ref output, _repeated_visitedCountries_codec);
      if (Origin.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Origin);
      }
      if (ReportType != global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto.Types.ReportType.Unknown) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ReportType);
      }
      if (DaysSinceOnsetOfSymptoms != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(DaysSinceOnsetOfSymptoms);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(KeyData);
      }
      if (RollingStartIntervalNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RollingStartIntervalNumber);
      }
      if (RollingPeriod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RollingPeriod);
      }
      if (TransmissionRiskLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransmissionRiskLevel);
      }
      size += visitedCountries_.CalculateSize(_repeated_visitedCountries_codec);
      if (Origin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Origin);
      }
      if (ReportType != global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto.Types.ReportType.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReportType);
      }
      if (DaysSinceOnsetOfSymptoms != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DaysSinceOnsetOfSymptoms);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TemporaryExposureKeyGatewayDto other) {
      if (other == null) {
        return;
      }
      if (other.KeyData.Length != 0) {
        KeyData = other.KeyData;
      }
      if (other.RollingStartIntervalNumber != 0) {
        RollingStartIntervalNumber = other.RollingStartIntervalNumber;
      }
      if (other.RollingPeriod != 0) {
        RollingPeriod = other.RollingPeriod;
      }
      if (other.TransmissionRiskLevel != 0) {
        TransmissionRiskLevel = other.TransmissionRiskLevel;
      }
      visitedCountries_.Add(other.visitedCountries_);
      if (other.Origin.Length != 0) {
        Origin = other.Origin;
      }
      if (other.ReportType != global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto.Types.ReportType.Unknown) {
        ReportType = other.ReportType;
      }
      if (other.DaysSinceOnsetOfSymptoms != 0) {
        DaysSinceOnsetOfSymptoms = other.DaysSinceOnsetOfSymptoms;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyData = input.ReadBytes();
            break;
          }
          case 16: {
            RollingStartIntervalNumber = input.ReadUInt32();
            break;
          }
          case 24: {
            RollingPeriod = input.ReadUInt32();
            break;
          }
          case 32: {
            TransmissionRiskLevel = input.ReadInt32();
            break;
          }
          case 42: {
            visitedCountries_.AddEntriesFrom(input, _repeated_visitedCountries_codec);
            break;
          }
          case 50: {
            Origin = input.ReadString();
            break;
          }
          case 56: {
            ReportType = (global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto.Types.ReportType) input.ReadEnum();
            break;
          }
          case 64: {
            DaysSinceOnsetOfSymptoms = input.ReadSInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            KeyData = input.ReadBytes();
            break;
          }
          case 16: {
            RollingStartIntervalNumber = input.ReadUInt32();
            break;
          }
          case 24: {
            RollingPeriod = input.ReadUInt32();
            break;
          }
          case 32: {
            TransmissionRiskLevel = input.ReadInt32();
            break;
          }
          case 42: {
            visitedCountries_.AddEntriesFrom(ref input, _repeated_visitedCountries_codec);
            break;
          }
          case 50: {
            Origin = input.ReadString();
            break;
          }
          case 56: {
            ReportType = (global::FederationGatewayApi.Models.Proto.TemporaryExposureKeyGatewayDto.Types.ReportType) input.ReadEnum();
            break;
          }
          case 64: {
            DaysSinceOnsetOfSymptoms = input.ReadSInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TemporaryExposureKeyGatewayDto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Data type representing why this key was published.
      /// </summary>
      public enum ReportType {
        /// <summary>
        /// Never returned by the client API.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("CONFIRMED_TEST")] ConfirmedTest = 1,
        [pbr::OriginalName("CONFIRMED_CLINICAL_DIAGNOSIS")] ConfirmedClinicalDiagnosis = 2,
        [pbr::OriginalName("SELF_REPORT")] SelfReport = 3,
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        [pbr::OriginalName("RECURSIVE")] Recursive = 4,
        /// <summary>
        /// Used to revoke a key, never returned by client API.
        /// </summary>
        [pbr::OriginalName("REVOKED")] Revoked = 5,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
